
(function(){
//
// module globals
//
var mod = {}
//
// name
//
var name = 'sequence logo'

//
// initialization
//
var init = function() {
  mod.data = {}
 }
//
// inputs
//
var inputs = {

 }
//
// outputs
//
var outputs = {
  }
//
// interface
//
var interface = function(div){
  //
  // change parameters buttons
  //
  mod.div = div
  //
  // on-screen drawing canvas
  //


  var os_svg = d3.select(div).append("svg")
            .attr("height", 250)
            .attr("width", 350)
  os_svg.append("rect")
            .attr("width", "100%")
            .attr("height", "100%")
            .attr("fill", "white");
  mod.os_svg = os_svg

  div.appendChild(document.createElement('br'))
  //
  // file input control
  //
  var file = document.createElement('input')
     file.setAttribute('type','file')
     file.setAttribute('id',div.id+'file_input')
     file.style.position = 'absolute'
     file.style.left = 0
     file.style.top = 0
     file.style.width = 0
     file.style.height = 0
     file.style.opacity = 0
     file.addEventListener('change',function() {
        json_read_handler()
        })
     div.appendChild(file)
     mod.file = file
  // //
  // // modify the filter size
  // //
  // div.appendChild(document.createTextNode('filter size: '))
  // input = document.createElement('input')
  //    input.type = 'text'
  //    input.size = 3
  //    input.value = 10
  //    input.addEventListener('keydown',function(evt){
  //      mod.filter_size = input.value
  //    })
  //    div.appendChild(input)
  // div.appendChild(document.createElement('br'))
  //
  // off-screen image canvas
  //
  var canvas = document.createElement('canvas')
     mod.img = canvas
  //
  // file select button
  //
  var btn = document.createElement('button')
     btn.style.padding = mods.ui.padding
     btn.style.margin = 1
     btn.appendChild(document.createTextNode('select json file'))
     btn.addEventListener('click',function(){
        var file = document.getElementById(div.id+'file_input')
        file.value = null
        file.click()
        })
     div.appendChild(btn)
  div.appendChild(document.createElement('br'))
  //
  // view button
  //
  var btn = document.createElement('button')
     btn.style.padding = mods.ui.padding
     btn.style.margin = 1
     btn.appendChild(document.createTextNode('view'))
     btn.addEventListener('click',function(){
        var win = window.open('')
        var btn = document.createElement('button')
           btn.appendChild(document.createTextNode('close'))
           btn.style.padding = mods.ui.padding
           btn.style.margin = 1
           btn.addEventListener('click',function(){
              win.close()
              })
           win.document.body.appendChild(btn)
        win.document.body.appendChild(document.createElement('br'))
        var svg = d3.select(win.document.body)
                    .append("svg")
                    .attr("height", 350)
                    .attr("width", 650)
        win.document.body.appendChild(document.createElement('br'))
        sequenceLogo(mod.data, svg);
        })
     div.appendChild(btn)
  div.appendChild(document.createTextNode(' '))
}


//
//  local functions
//

//
// JSON processing functions
//
function json_read_handler(event) {
   var file_reader = new FileReader()
   file_reader.onload = json_handler
   input_file = mod.file.files[0]
   file_name = input_file.name
   file_reader.readAsText(input_file)
   }

function json_handler(event) {
   var lines = event.target.result;
   var data = JSON.parse(lines);
   mod.data = data;
   removeSequenceLogo(mod.os_svg)
   sequenceLogo(mod.data, mod.os_svg);
}


var bp_colors = {
    "A": "#66BB6A",
    "C": "#2196F3",
    "T": "#E57373",
    "G": "#FFEE58"
};
bp_database = {
    'A': {
        'name': 'adenine',
        'type': 'purine'
    },
    'G': {
        'name': 'guanine',
        'type': 'purine'
    },
    'C': {
        'name': 'cytosine',
        'type': 'pyrimidine'
    },
    'T': {
        'name': 'thymine',
        'type': 'pyrimidine'
    },
}
aa_database = {
    'F': {
        'color': "#f44336",
        'charge': 'nonpolar',
        'solubility': 'hydrophobic',
        'g_property': 'aliphatic',
        'essentiality': 'essential',
        'polarity': 'nonpolar',
        'name': 'phenylalanine',
    },
    'I': {
        'color': "#E91E63",
        'charge': 'nonpolar',
        'solubility': 'hydrophobic',
        'g_property': 'aliphatic',
        'essentiality': 'essential',
        'polarity': 'nonpolar',
        'name': 'isoleucine',
    },
    'L': {
        'color': "#9C27B0",
        'charge': 'nonpolar',
        'solubility': 'hydrophobic',
        'g_property': 'aliphatic',
        'essentiality': 'essential',
        'polarity': 'nonpolar',
        'name': 'leucine',
    },
    'V': {
        'color': "#673AB7",
        'charge': 'nonpolar',
        'solubility': 'hydrophobic',
        'g_property': 'aliphatic',
        'essentiality': 'essential',
        'polarity': 'nonpolar',
        'name': 'valine',
    },
    'A': {
        'color': "#3F51B5",
        'charge': 'nonpolar',
        'solubility': 'hydrophobic',
        'g_property': 'aliphatic',
        'essentiality': 'natural',
        'polarity': 'nonpolar',
        'name': 'alanine',
    },
    'W': {
        'color': "#2196F3",
        'charge': 'nonpolar',
        'solubility': 'hydrophobic',
        'g_property': 'sulfur',
        'essentiality': 'essential',
        'polarity': 'nonpolar',
        'name': 'tryptophan',
    },
    'M': {
        'color': "#03A9F4",
        'charge': 'nonpolar',
        'solubility': 'hydrophobic',
        'g_property': 'sulfur',
        'essentiality': 'essential',
        'polarity': 'nonpolar',
        'name': 'methionine',
    },
    'C': {
        'color': "#00BCD4",
        'charge': 'nonpolar',
        'solubility': 'hydrophobic',
        'g_property': 'sulfur',
        'essentiality': 'natural',
        'polarity': 'nonpolar',
        'name': 'cysteine',
    },
    'P': {
        'color': "#009688",
        'charge': 'nonpolar',
        'solubility': 'neutral',
        'g_property': 'acidic',
        'essentiality': 'natural',
        'polarity': 'nonpolar',
        'name': 'proline',
    },
    'G': {
        'color': "#4CAF50",
        'charge': 'nonpolar',
        'solubility': 'neutral',
        'g_property': 'hydroxyl',
        'essentiality': 'natural',
        'polarity': 'nonpolar',
        'name': 'glycine',
    },
    'Y': {
        'color': "#8BC34A",
        'charge': 'uncharged',
        'solubility': 'neutral',
        'g_property': 'hydroxyl',
        'essentiality': 'natural',
        'polarity': 'polar',
        'name': 'tyrosine',
    },
    'T': {
        'color': "#CDDC39",
        'charge': 'uncharged',
        'solubility': 'neutral',
        'g_property': 'hydroxyl',
        'essentiality': 'essential',
        'polarity': 'polar',
        'name': 'threonine',
    },
    'S': {
        'color': "#FFEB3B",
        'charge': 'uncharged',
        'solubility': 'neutral',
        'g_property': 'hydroxyl',
        'essentiality': 'natural',
        'polarity': 'polar',
        'name': 'serine',
    },
    'H': {
        'color': "#FFC107",
        'charge': 'charged',
        'solubility': 'neutral',
        'g_property': 'basic',
        'essentiality': 'essential',
        'polarity': 'polar',
        'name': 'histidine',
    },
    'K': {
        'color': "#FF9800",
        'charge': 'charged',
        'solubility': 'hydrophilic',
        'g_property': 'basic',
        'essentiality': 'essential',
        'polarity': 'polar',
        'name': 'lysine',
    },
    'R': {
        'color': "#FF5722",
        'charge': 'charged',
        'solubility': 'hydrophilic',
        'g_property': 'basic',
        'essentiality': 'natural',
        'polarity': 'polar',
        'name': 'arginine',
    },
    'E': {
        'color': "#9E9E9E",
        'charge': 'uncharged',
        'solubility': 'hydrophilic',
        'g_property': 'acidic',
        'essentiality': 'natural',
        'polarity': 'polar',
        'name': 'glutamic acid',
    },
    'D': {
        'color': "#607D8B",
        'charge': 'uncharged',
        'solubility': 'hydrophilic',
        'g_property': 'acidic',
        'essentiality': 'natural',
        'polarity': 'polar',
        'name': 'aspartic acid',
    },
    'Q': {
        'color': "#795548",
        'charge': 'uncharged',
        'solubility': 'hydrophilic',
        'g_property': 'amide',
        'essentiality': 'natural',
        'polarity': 'polar',
        'name': 'glutamine',
    },
    'N': {
        'color': "#FFFDE7",
        'charge': 'uncharged',
        'solubility': 'hydrophilic',
        'g_property': 'amide',
        'essentiality': 'natural',
        'polarity': 'polar',
        'name': 'asparagine',
    }
}

function removeSequenceLogo(svg) {
  svg.selectAll("g").remove()
}

function sequenceLogo(input_data, svg) {

  var base_pairs = true;
  var filter_type = "bp";

  input_data = input_data['sq_logo']
  var width = svg[0][0].clientWidth - 50,
      height = svg[0][0].clientHeight - 50;

  // Set up Sequence Logo
  var x = d3.scale.ordinal()
      .rangeRoundBands([0, width], .1);
  var y = d3.scale.linear()
      .range([height, 0]);
  var labels = d3.scale.linear()
      .range([height, 0]);
  var xAxis = d3.svg.axis()
      .scale(x)
      .orient("bottom").ticks(1);
  var yAxis = d3.svg.axis()
      .scale(labels)
      .orient("left")
      .ticks(5);


  var number_of_variables = 4
  for (var col = 0; col < input_data.length; col++) {
      var sq_column = input_data[col];
      var bits_sum = 0;
      for (var letter = 0; letter < sq_column.length; letter++) {
          if (sq_column[letter]['bits'] < 0) {
              sq_column[letter]['bits'] = 0;
          }
          bits_sum += sq_column[letter]['bits'];
          // Checks if the data is of aa or bp
          if (!bp_database[sq_column[letter]['letter']]) {
              base_pairs = false;
              d3.selectAll(".aa_option").style("display", "block");
              d3.selectAll(".base_pair_option").style("display", "none");
              //    d3.select("sq_filter").text("Aminoacid");
          }
      }
      var entropy = 0;
      for (var letter = 0; letter < sq_column.length; letter++) {
          sq_column[letter]['bits'] = (sq_column[letter]['bits']) / bits_sum;
          if (sq_column[letter]['bits'] > 0) {
              entropy += -(sq_column[letter]['bits'] * Math.log2(sq_column[letter]['bits']));
          }
      }
      var scale = Math.log2(number_of_variables) - entropy;
      for (var letter = 0; letter < sq_column.length; letter++) {
          sq_column[letter]['bits'] *= scale;
      }
  }

  input_data.forEach(function (d) {
      var y0 = 0;
      d.bits = d.map(function (entry) {
          return {
              bits: entry.bits,
              letter: entry.letter,
              node: entry.node,
              y0: y0,
              y1: y0 += +entry.bits
          };
      })
      d.bitTotal = d.bits[d.bits.length - 1].y1;
  });
  for (var i = 0; i < input_data.length; i++) {
      input_data[i].bits.sort(function (a, b) {
          return d3.ascending(b.bits, a.bits);
      });
  }
  x.domain(input_data.map(function (d, i) {
      return i;
  }));
  var maxBits = d3.max(input_data, function (d) {
      return d.bitTotal
  });
  y.domain([0, Math.log2(number_of_variables)]);

  var labels_range = base_pairs ? 2 : 4.3;
  labels.domain([0, labels_range]);

  var sq_logo = svg.append("g")
           .attr("transform", "translate(30,15)")
           .attr('id', "sequence_logo")

  sq_logo.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height + ")")
          .call(xAxis);

  sq_logo.append("g")
          .attr("class", "y axis")
          .call(yAxis)
          .append("text")
          .attr("y", 6)
          .attr("dy", ".71em")
          .style("text-anchor", "end")

  sq_logo.selectAll(".axis path")
         .style({ 'stroke': 'Black', 'fill': 'none', 'stroke-width': '1px'})

  sq_logo.selectAll(".axis")
         .style("font-family", "Orator Std Medium")

  var column = sq_logo.selectAll(".sequence-column")
          .data(input_data)
          .enter()
          .append("g")
          .attr("transform", function (d, i) {
              return "translate(" + (x(i) + (x.rangeBand() / 2)) + ",0)";
          })
          .attr("class", "sequence-column");

  // approximation to bring cap-height to full font size
  var capHeightAdjust = 1.43;

      column.selectAll("text")
          .data(function (d) {
              return d.bits;
          })
          .enter()
          .append("text")
          .attr("y", function (e) {
              return y(e.y0);
          })
          .text(function (e) {
              return e.letter;
          })
          .attr("class", "letter-bp")
          .style("text-anchor", "middle")
          .style("font-family", "Orator Std Medium")
          .style("fill", function (e) {
              return base_pairs ? bp_colors[e.letter] :
                     aa_database[e.letter]['color'];
          })
          .style("text-anchor", "middle")
          .attr("textLength", x.rangeBand() * 0.9)
          .attr("lengthAdjust", "spacingAndGlyphs")
          .attr("font-size", function (e) {
              return (y(e.y0) - y(e.y1)) * capHeightAdjust;
          })
          .style("font-size", function (e) {
              return (y(e.y0) - y(e.y1)) * capHeightAdjust;
          })

}

// return values
//
return ({
   name:name,
   init:init,
   inputs:inputs,
   outputs:outputs,
   interface:interface
   })
}())
