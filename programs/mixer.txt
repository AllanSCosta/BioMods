{"modules":{"0.17758985874157074":{"definition":"//\r\n// This work may be reproduced, modified, distributed, performed, and\r\n// displayed for any purpose, but must acknowledge the mods\r\n// project. Copyright is retained and must be preserved. The work is\r\n// provided as is; no warranty is provided, and users accept all\r\n// liability.\r\n//\r\n// closure\r\n//\r\n(function(){\r\n//\r\n// module globals\r\n//\r\nvar mod = {}\r\n//\r\n// name\r\n//\r\nvar name = 'io-websocket'\r\n\r\n//\r\n// initialization\r\n//\r\nvar init = function() {\r\n  var s = document.createElement('script');\r\n  s.setAttribute('src', \"https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.min.js\");\r\n  document.body.appendChild(s);\r\n  var s = document.createElement('script');\r\n  s.setAttribute('src', \"https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js\");\r\n  document.body.appendChild(s);\r\n}\r\n\r\n\r\n//\r\n// inputs\r\n//\r\nvar inputs = {\r\n\r\n}\r\n//\r\n// outputs\r\n//\r\nvar outputs = {\r\n\r\n}\r\n//\r\n// interface\r\n//\r\nvar interface = function(div){\r\n\r\n  mod.div = div\r\n  var program = \"\"\r\n  var sel = document.createElement('select')\r\n     sel.style.padding = mods.ui.padding\r\n  var btn = document.createElement('button')\r\n     btn.style.padding = mods.ui.padding\r\n     btn.style.margin = 1\r\n     btntxt = document.createTextNode('Connect')\r\n     btn.appendChild(btntxt)\r\n     btn.addEventListener('click',function(){\r\n       connect();\r\n      })\r\n     div.appendChild(btn)\r\n  div.appendChild(document.createElement('br'))\r\n\r\n\r\n}\r\n\r\n///////\r\n// main function for http requests\r\n//////\r\n\r\n$jsonp = (function(){\r\n  var that = {};\r\n  that.send = function(src, options) {\r\n    var callback_name = options.callbackName || 'callback',\r\n      on_success = options.onSuccess || function(){},\r\n      on_timeout = function(){\r\n        console.log(\"timed!\");\r\n      },\r\n      timeout = options.timeout || 10; // sec\r\n    var timeout_trigger = window.setTimeout(function(){\r\n      window[callback_name] = function(){};\r\n      on_timeout();\r\n    }, timeout * 1000);\r\n    window[callback_name] = function(data){\r\n      window.clearTimeout(timeout_trigger);\r\n      on_success(data);\r\n    }\r\n    var script = document.createElement('script');\r\n    script.type = 'text/javascript';\r\n    script.async = true;\r\n    script.src = src;\r\n    document.getElementsByTagName('head')[0].appendChild(script);\r\n  }\r\n  return that;\r\n})();\r\n\r\n\r\n\r\nfunction connect() {\r\n  var socket = io.connect('http://localhost:31950', {reconnect: true});\r\n  console.log(\"connecting\")\r\n}\r\n\r\n//\r\n// return values\r\n//\r\nreturn ({\r\n   name:name,\r\n   init:init,\r\n   inputs:inputs,\r\n   outputs:outputs,\r\n   interface:interface\r\n   })\r\n}())\r\n","top":"425","left":"339","inputs":{},"outputs":{}},"0.11448007775005609":{"definition":"//\r\n// APA node module\r\n//\r\n// Neil Gershenfeld\r\n// (c) Massachusetts Institute of Technology 2016\r\n//\r\n// This work may be reproduced, modified, distributed, performed, and\r\n// displayed for any purpose, but must acknowledge the mods\r\n// project. Copyright is retained and must be preserved. The work is\r\n// provided as is; no warranty is provided, and users accept all\r\n// liability.\r\n//\r\n// closure\r\n//\r\n(function(){\r\n//\r\n// module globals\r\n//\r\nvar mod = {}\r\n//\r\n// name\r\n//\r\nvar name = 'jog'\r\n\r\n//\r\n// initialization\r\n//\r\nvar init = function() {\r\n  mod.step_size = 1\r\n }\r\n\r\n\r\n//\r\n// inputs\r\n//\r\nvar inputs = {\r\n\r\n}\r\n//\r\n// outputs\r\n//\r\nvar outputs = {\r\n  }\r\n//\r\n// interface\r\n//\r\nvar interface = function(div){\r\n  //\r\n  // change parameters buttons\r\n  //\r\n  mod.div = div\r\n  var program = \"\"\r\n  var sel = document.createElement('select')\r\n     sel.style.padding = mods.ui.padding\r\n  //\r\n  // port input\r\n  //\r\n  div.appendChild(document.createTextNode('step size: '))\r\n  input = document.createElement('input')\r\n      input.type = 'number'\r\n      input.size = 2\r\n      input.value = 1\r\n      input.addEventListener('change',function(evt){\r\n        mod.step_size = this.value\r\n        })\r\n      div.appendChild(input)\r\n\r\n\r\n  //\r\n  // up button\r\n  //\r\n  div.appendChild(document.createElement('br'))\r\n\r\n  div.appendChild(document.createElement('br'))\r\n  div.appendChild(document.createTextNode('[X-Y]'))\r\n  div.appendChild(document.createElement('br'))\r\n  var btn = document.createElement('button')\r\n     btn.style.padding = mods.ui.padding\r\n     btn.style.margin = 1\r\n     btntxt = document.createTextNode('↑')\r\n     btn.appendChild(btntxt)\r\n     btn.addEventListener('click',function(){\r\n       move({'y': parseInt(mod.step_size)})\r\n      })\r\n     div.appendChild(btn)\r\n  div.appendChild(document.createElement('br'))\r\n\r\n  var btn = document.createElement('button')\r\n     btn.style.padding = mods.ui.padding\r\n     btn.style.margin = 1\r\n     btntxt = document.createTextNode('←')\r\n     btn.appendChild(btntxt)\r\n     btn.addEventListener('click',function(){\r\n       move({'x': -parseInt(mod.step_size)})\r\n      })\r\n     div.appendChild(btn)\r\n\r\n\r\n  var btn = document.createElement('button')\r\n     btn.style.padding = mods.ui.padding\r\n     btn.style.margin = 1\r\n     btntxt = document.createTextNode('↓')\r\n     btn.appendChild(btntxt)\r\n     btn.addEventListener('click',function(){\r\n       move({'y': -parseInt(mod.step_size)})\r\n      })\r\n     div.appendChild(btn)\r\n\r\n  var btn = document.createElement('button')\r\n     btn.style.padding = mods.ui.padding\r\n     btn.style.margin = 1\r\n     btntxt = document.createTextNode('→')\r\n     btn.appendChild(btntxt)\r\n     btn.addEventListener('click',function(){\r\n       move({'x': parseInt(mod.step_size)})\r\n      })\r\n     div.appendChild(btn)\r\n  div.appendChild(document.createElement('br'))\r\n\r\n\r\n\r\n\r\n  div.appendChild(document.createElement('br'))\r\n  div.appendChild(document.createTextNode('[Z]'))\r\n  div.appendChild(document.createElement('br'))\r\n  var btn = document.createElement('button')\r\n     btn.style.padding = mods.ui.padding\r\n     btn.style.margin = 1\r\n     btntxt = document.createTextNode('↑')\r\n     btn.appendChild(btntxt)\r\n     btn.addEventListener('click',function(){\r\n       move({'z': parseInt(mod.step_size)})\r\n      })\r\n     div.appendChild(btn)\r\n\r\n  var btn = document.createElement('button')\r\n     btn.style.padding = mods.ui.padding\r\n     btn.style.margin = 1\r\n     btntxt = document.createTextNode('↓')\r\n     btn.appendChild(btntxt)\r\n     btn.addEventListener('click',function(){\r\n       move({'z': -parseInt(mod.step_size)})\r\n      })\r\n     div.appendChild(btn)\r\n  div.appendChild(document.createElement('br'))\r\n  div.appendChild(document.createElement('br'))\r\n\r\n  div.appendChild(document.createTextNode('[slot]'))\r\n  div.appendChild(document.createElement('br'))\r\n\r\n  cols = [\"A\", \"B\", \"C\", \"D\", \"E\"]\r\n  rows = [3,2,1]\r\n\r\n  for (var row = 0; row < rows.length; row++) {\r\n    for (var col = 0; col < cols.length; col++){\r\n      var btn = document.createElement('button')\r\n         btn.style.padding = mods.ui.padding\r\n         btn.style.margin = 1\r\n         var slot = cols[col] + rows[row]\r\n         btntxt = document.createTextNode(slot)\r\n         btn.appendChild(btntxt)\r\n         btn.addEventListener('click',function(){\r\n           moveToSlot(this.innerHTML)\r\n          })\r\n         div.appendChild(btn)\r\n    }\r\n    div.appendChild(document.createElement('br'))\r\n  }\r\n\r\n  div.appendChild(document.createElement('br'))\r\n\r\n}\r\n\r\n\r\n\r\nfunction move(coords) {\r\n  var url = \"http://localhost:31950/jog\"\r\n  var params = coords\r\n  $.ajax({\r\n    type: \"POST\",\r\n    dataType: \"json\",\r\n    url: url,\r\n    contentType: \"application/json; charset=utf-8\",\r\n    data: JSON.stringify(params),\r\n  });\r\n}\r\n\r\nfunction moveToSlot(slot) {\r\n  var url = \"http://localhost:31950/move_to_slot\"\r\n  var params = {\"slot\" : slot}\r\n  $.ajax({\r\n    type: \"POST\",\r\n    dataType: \"json\",\r\n    url: url,\r\n    contentType: \"application/json; charset=utf-8\",\r\n    data: JSON.stringify(params),\r\n  });\r\n}\r\n\r\n\r\n//\r\n// return values\r\n//\r\nreturn ({\r\n   name:name,\r\n   init:init,\r\n   inputs:inputs,\r\n   outputs:outputs,\r\n   interface:interface\r\n   })\r\n}())\r\n","top":"353","left":"151","inputs":{},"outputs":{}},"0.7291149947451232":{"definition":"//\r\n// APA node module\r\n//\r\n// Neil Gershenfeld\r\n// (c) Massachusetts Institute of Technology 2016\r\n//\r\n// This work may be reproduced, modified, distributed, performed, and\r\n// displayed for any purpose, but must acknowledge the mods\r\n// project. Copyright is retained and must be preserved. The work is\r\n// provided as is; no warranty is provided, and users accept all\r\n// liability.\r\n//\r\n// closure\r\n//\r\n(function(){\r\n//\r\n// module globals\r\n//\r\nvar mod = {}\r\n//\r\n// name\r\n//\r\nvar name = 'connect'\r\n\r\n//\r\n// initialization\r\n//\r\nvar init = function() {\r\n  mod.port = \"COM4\"\r\n  mod.connected = false\r\n }\r\n//\r\n// inputs\r\n//\r\nvar inputs = {\r\n\r\n}\r\n//\r\n// outputs\r\n//\r\nvar outputs = {\r\n  }\r\n//\r\n// interface\r\n//\r\nvar interface = function(div){\r\n  //\r\n  // change parameters buttons\r\n  //\r\n  mod.div = div\r\n  var program = \"\"\r\n  var sel = document.createElement('select')\r\n     sel.style.padding = mods.ui.padding\r\n  //\r\n  // port input\r\n  //\r\n  div.appendChild(document.createTextNode('port: '))\r\n  input = document.createElement('input')\r\n      input.type = 'text'\r\n      input.size = 10\r\n      input.value = \"COM4\"\r\n      input.addEventListener('change',function(evt){\r\n        mod.port = input.value\r\n        })\r\n      div.appendChild(input)\r\n  //\r\n  // connect button\r\n  //\r\n  div.appendChild(document.createElement('br'))\r\n  btn = document.createElement('button')\r\n     btn.style.padding = mods.ui.padding\r\n     btn.style.margin = 1\r\n     btntxt = document.createTextNode('connect')\r\n     btn.appendChild(btntxt)\r\n     btn.addEventListener('click',function(){\r\n       if (!mod.connected){\r\n         connect(mod.port);\r\n       } else {\r\n         disconnect();\r\n       }\r\n      })\r\n     div.appendChild(btn)\r\n  div.appendChild(document.createElement('br'))\r\n  //\r\n  // status\r\n  //\r\n  div.appendChild(document.createTextNode('status: '))\r\n  status = document.createElement('p')\r\n  status.innerHTML = \"not connected\"\r\n\r\n}\r\nfunction connect(port) {\r\n  var url = \"http://localhost:31950/robot/serial/connect\"\r\n  console.log('connecting')\r\n  var params = {'port': port}\r\n  $.ajax({\r\n    type: \"POST\",\r\n    dataType: \"json\",\r\n    url: url,\r\n    contentType: \"application/json; charset=utf-8\",\r\n    data: JSON.stringify(params),\r\n    success: function(){\r\n      mod.port = port;\r\n      is_connected();\r\n    }\r\n  });\r\n}\r\nfunction disconnect(){\r\n  var url = \"http://localhost:31950/robot/serial/disconnect\"\r\n  console.log('disconecting')\r\n  $.ajax({\r\n    type: \"GET\",\r\n    dataType: \"json\",\r\n    url: url,\r\n    contentType: \"application/json; charset=utf-8\",\r\n    success: function(){\r\n      mod.port = \"\";\r\n      is_connected();\r\n    }\r\n  });\r\n\r\n}\r\n\r\nfunction is_connected() {\r\n  var url = \"http://localhost:31950/robot/serial/is_connected\"\r\n  $.ajax({\r\n    type: \"GET\",\r\n    dataType: \"json\",\r\n    url: url,\r\n    contentType: \"application/json; charset=utf-8\",\r\n    success: function(data){\r\n      mod.connected = data.is_connected;\r\n      mod.port = data.port;\r\n      if (mod.connected) {\r\n        btntxt.innerHTML = \"disconnect\"\r\n        status.innerHTML = \"connected to \" + mod.port;\r\n      } else {\r\n        btntxt.innerHTML = \"connect\"\r\n        status.innerHTML = \"disconnected\"\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n//\r\n// return values\r\n//\r\nreturn ({\r\n   name:name,\r\n   init:init,\r\n   inputs:inputs,\r\n   outputs:outputs,\r\n   interface:interface\r\n   })\r\n}())\r\n","top":"564","left":"352","inputs":{},"outputs":{}},"0.1651023753754668":{"definition":"//\r\n// (c) Massachusetts Institute of Technology 2016\r\n//\r\n// This work may be reproduced, modified, distributed, performed, and\r\n// displayed for any purpose, but must acknowledge the mods\r\n// project. Copyright is retained and must be preserved. The work is\r\n// provided as is; no warranty is provided, and users accept all\r\n// liability.\r\n//\r\n// closure\r\n//\r\n(function(){\r\n//\r\n// module globals\r\n//\r\nvar mod = {}\r\n//\r\n// name\r\n//\r\nvar name = 'mix'\r\n\r\n//\r\n// initialization\r\n//\r\nvar init = function() {\r\n  mod.volume = 100\r\n  mod.repetitions = 5\r\n  mod.container = \"\"\r\n  mod.location = \"A1\"\r\n  mod.newtip = false\r\n  mod.instructions = []\r\n }\r\n\r\n\r\n//\r\n// inputs\r\n//\r\nvar inputs = {\r\n  instrument:{\r\n   type:'object',\r\n   event:function(evt){\r\n      mod.instructions = evt.detail\r\n      outputs.instrument.event();\r\n    }},\r\n   container:{\r\n   type:'string',\r\n   event:function(evt){\r\n      mod.container = evt.detail\r\n      outputs.instrument.event();\r\n    }},\r\n}\r\n\r\n//\r\n// outputs\r\n//\r\nvar outputs = {\r\n  instrument:{\r\n   type:'object',\r\n   event:function(data){\r\n   var gps_ln = mod.instructions[0]['groups'].length\r\n   if (gps_ln == 0 || mod.newtip){\r\n     gps_ln++;\r\n     mod.instructions[0]['groups'].push({});\r\n   }\r\n   mix_obj = {}\r\n   mix_obj['container'] = mod.container\r\n   mix_obj['volume'] = mod.volume\r\n   mix_obj['location'] = mod.location\r\n   mix_obj['repetitions'] = mod.repetitions\r\n   mod.instructions[0]['groups'][gps_ln - 1]['mix'] = [mix_obj]\r\n   mods.output(mod, 'instrument', mod.instructions)\r\n    }}\r\n  }\r\n\r\n\r\n//\r\n// interface\r\n//\r\nvar interface = function(div){\r\n  //\r\n  // change parameters buttons\r\n  //\r\n  mod.div = div\r\n  var program = \"\"\r\n  var sel = document.createElement('select')\r\n     sel.style.padding = mods.ui.padding\r\n  //\r\n  // labware input\r\n  //\r\n  div.appendChild(document.createTextNode('location: '))\r\n  input = document.createElement('input')\r\n        input.type = 'text'\r\n        input.placeholder = \"location\"\r\n        input.value = \"A1\"\r\n        input.size = 10\r\n        input.addEventListener('input',function(evt){\r\n          mod.port = this.value\r\n          outputs.instrument.event();\r\n          })\r\n        div.appendChild(input)\r\n\r\n  div.appendChild(document.createElement('br'))\r\n  div.appendChild(document.createTextNode('repetitions: '))\r\n  input = document.createElement('input')\r\n        input.type = 'text'\r\n        input.placeholder = \"repetitions\"\r\n        input.value = 5\r\n        input.size = 10\r\n        input.addEventListener('input',function(evt){\r\n          mod.repetitions = this.value\r\n          outputs.instrument.event();\r\n          })\r\n        div.appendChild(input)\r\n  div.appendChild(document.createElement('br'))\r\n\r\n  div.appendChild(document.createTextNode('volume: '))\r\n  input = document.createElement('input')\r\n        input.type = 'text'\r\n        input.placeholder = \"volume\"\r\n        input.value = 100\r\n        input.size = 10\r\n        input.addEventListener('input',function(evt){\r\n          mod.volume = this.value\r\n          outputs.instrument.event();\r\n          })\r\n        div.appendChild(input)\r\n\r\n  div.appendChild(document.createElement('br'))\r\n  div.appendChild(document.createTextNode('new tip: '))\r\n  input = document.createElement('input')\r\n        input.type = 'checkbox'\r\n        input.value = true\r\n        input.addEventListener('change',function(evt){\r\n          mod.newtip = this.checked;\r\n          outputs.instrument.event();\r\n          })\r\n        div.appendChild(input)\r\n}\r\n\r\n\r\n//\r\n// return values\r\n//\r\nreturn ({\r\n   name:name,\r\n   init:init,\r\n   inputs:inputs,\r\n   outputs:outputs,\r\n   interface:interface\r\n   })\r\n}())\r\n","top":"379","left":"1127","inputs":{},"outputs":{}},"0.8242047724028183":{"definition":"// (c) Massachusetts Institute of Technology 2016\r\n//\r\n// This work may be reproduced, modified, distributed, performed, and\r\n// displayed for any purpose, but must acknowledge the mods\r\n// project. Copyright is retained and must be preserved. The work is\r\n// provided as is; no warranty is provided, and users accept all\r\n// liability.\r\n//\r\n// closure\r\n//\r\n(function(){\r\n//\r\n// module globals\r\n//\r\nvar mod = {}\r\n//\r\n// name\r\n//\r\nvar name = 'pipette'\r\n\r\n//\r\n// initialization\r\n//\r\nvar init = function() {\r\n  mod.pipette = {}\r\n  if (typeof head == \"undefined\") { head = {} }\r\n  mod.name = \"\"\r\n  mod.pipette[\"tip-racks\"] = [{\"container\" : \"\"}]\r\n  mod.pipette[\"trash-container\"] = {\"container\": \"\"}\r\n  mod.pipette[\"multi-channel\"] = false\r\n  mod.pipette[\"axis\"] = \"b\"\r\n  mod.pipette[\"volume\"] = 200\r\n  mod.pipette[\"down-plunger-speed\"] = 300\r\n  mod.pipette[\"up-plunger-speed\"] = 500\r\n  mod.pipette[\"tip-plunge\"] = 8\r\n  mod.pipette[\"extra-pull-volume\"] = 20\r\n  mod.pipette[\"extra-pull-delay\"] = 0.2\r\n  mod.pipette[\"distribute-percentage\"] = 0.1\r\n  mod.pipette[\"points\"] = [\r\n\t\t\t{\r\n\t\t\t\t\"f1\" : 10,\r\n\t\t\t\t\"f2\" : 6\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"f1\" : 25,\r\n\t\t\t\t\"f2\" : 23\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"f1\" : 50,\r\n\t\t\t\t\"f2\" : 49\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"f1\" : 200,\r\n\t\t\t\t\"f2\" : 200\r\n\t\t\t}\r\n\t\t]\r\n }\r\n//\r\n// inputs\r\n//\r\nvar inputs = {\r\n  \"tip rack\":{\r\n  type:'string',\r\n  event:function(evt){\r\n    mod.pipette[\"tip-racks\"] = [{\"container\" : evt.detail}]\r\n  }},\r\n  \"trash container\":{\r\n  type:'string',\r\n  event:function(evt){\r\n    mod.pipette[\"trash-container\"] = {\"container\": evt.detail}\r\n   }}\r\n }\r\n//\r\n// outputs\r\n//\r\nvar outputs = {\r\n  pipette:{\r\n   type:'object',\r\n   event:function(data){\r\n      mods.output(mod, 'pipette', [{'tool': mod.name, 'groups': []}])\r\n    }}\r\n  }\r\n//\r\n// interface\r\n//\r\nvar interface = function(div){\r\n  //\r\n  // input parameters buttons\r\n\r\n  mod.div = div\r\n  var program = \"\"\r\n  var sel = document.createElement('select')\r\n     sel.style.padding = mods.ui.padding\r\n\r\n div.appendChild(document.createTextNode('name: '))\r\n var input = document.createElement('input')\r\n     input.type = 'text'\r\n     input.size = 7\r\n     input.addEventListener('input',function(evt){\r\n       if (mod.name in head) { delete head[mod.name] }\r\n       mod.name = this.value\r\n       build_pipette();\r\n       })\r\n     div.appendChild(input)\r\n\r\n div.appendChild(document.createElement('br'))\r\n div.appendChild(document.createTextNode('tip-racks: '))\r\n var input = document.createElement('input')\r\n     input.type = 'text'\r\n     input.size = 7\r\n     input.value = \"p200-rack\"\r\n     input.addEventListener('input',function(evt){\r\n       mod.pipette[\"tip-racks\"] = [{\"container\": this.value}]\r\n       build_pipette();\r\n       })\r\n     div.appendChild(input)\r\n div.appendChild(document.createElement('br'))\r\n\r\n\r\n div.appendChild(document.createTextNode('trash-container: '))\r\n var input = document.createElement('input')\r\n     input.type = 'text'\r\n     input.size = 7\r\n     input.value = \"trash\"\r\n     input.addEventListener('input',function(evt){\r\n       mod.pipette[\"trash-container\"] = {\"container\" : this.value}\r\n       build_pipette();\r\n       })\r\n     div.appendChild(input)\r\n\r\n\r\n   div.appendChild(document.createElement('br'))\r\n   div.appendChild(document.createTextNode(\"multi-channel: \"))\r\n   var input = document.createElement('input')\r\n       input.type = 'checked'\r\n       input.size = 5\r\n       input.value = false\r\n       input.addEventListener('input',function(evt){\r\n         mod.pipette['multi-channel'] = this.checked;\r\n         build_pipette();\r\n         })\r\n       div.appendChild(input)\r\n\r\n\r\n   div.appendChild(document.createElement('br'))\r\n   div.appendChild(document.createTextNode(\"axis: \"))\r\n   var input = document.createElement('input')\r\n       input.type = 'text'\r\n       input.size = 4\r\n       input.value = \"a\"\r\n       input.addEventListener('input',function(evt){\r\n         mod.pipette[\"axis\"] = this.value\r\n         build_pipette();\r\n         })\r\n       div.appendChild(input)\r\n\r\n   div.appendChild(document.createElement('br'))\r\n   div.appendChild(document.createTextNode(\"volume: \"))\r\n   var input = document.createElement('input')\r\n       input.type = 'number'\r\n       input.size = 4\r\n       input.value = 200\r\n       input.addEventListener('input',function(evt){\r\n         mod.pipette[\"volume\"] = this.value\r\n         build_pipette();\r\n         })\r\n       div.appendChild(input)\r\n\r\n   div.appendChild(document.createElement('br'))\r\n   div.appendChild(document.createTextNode(\"down-plunger-speed: \"))\r\n   var input = document.createElement('input')\r\n       input.type = 'number'\r\n       input.value = 300\r\n       input.size = 4\r\n       input.addEventListener('input',function(evt){\r\n         mod.pipette[\"down-plunger-speed\"] = this.value\r\n         build_pipette();\r\n         })\r\n       div.appendChild(input)\r\n\r\n    div.appendChild(document.createElement('br'))\r\n    div.appendChild(document.createTextNode(\"up-plunger-speed: \"))\r\n    var input = document.createElement('input')\r\n        input.type = 'number'\r\n        input.value = 500\r\n        input.size = 4\r\n        input.addEventListener('input',function(evt){\r\n          mod.pipette[\"up-plunger-speed\"] = this.value\r\n          build_pipette();\r\n          })\r\n        div.appendChild(input)\r\n\r\n\r\n\r\n   div.appendChild(document.createElement('br'))\r\n   div.appendChild(document.createTextNode(\"tip-plunge: \"))\r\n   var input = document.createElement('input')\r\n       input.type = 'number'\r\n       input.value = 8\r\n       input.size = 4\r\n       input.addEventListener('input',function(evt){\r\n         mod.pipette[\"tip-plunge\"] = this.value\r\n         build_pipette();\r\n         })\r\n       div.appendChild(input)\r\n\r\n    div.appendChild(document.createElement('br'))\r\n    div.appendChild(document.createTextNode(\"extra-pull-volume: \"))\r\n    var input = document.createElement('input')\r\n        input.type = 'number'\r\n        input.size = 4\r\n        input.value = 20\r\n        input.addEventListener('input',function(evt){\r\n          mod.pipette[\"extra-pull-volume\"] = this.value\r\n          build_pipette();\r\n          })\r\n        div.appendChild(input)\r\n\r\n    div.appendChild(document.createElement('br'))\r\n    div.appendChild(document.createTextNode(\"extra-pull-delay: \"))\r\n    var input = document.createElement('input')\r\n        input.type = 'number'\r\n        input.value = 0.2\r\n        input.size = 4\r\n        input.addEventListener('input',function(evt){\r\n          mod.pipette[\"extra-pull-delay\"] = this.value\r\n          build_pipette();\r\n          })\r\n        div.appendChild(input)\r\n\r\n    div.appendChild(document.createElement('br'))\r\n    div.appendChild(document.createTextNode(\"distribute-percentage: \"))\r\n    var input = document.createElement('input')\r\n        input.type = 'number'\r\n        input.value = 0.1\r\n        input.size = 4\r\n        input.addEventListener('input',function(evt){\r\n          mod.pipette[\"distribute-percentage\"] = this.value\r\n          build_pipette();\r\n          })\r\n        div.appendChild(input)\r\n}\r\n\r\n\r\nfunction build_pipette(){\r\n head[mod.name] = {}\r\n head[mod.name] = mod.pipette\r\n head[mod.name]['tool'] = 'pipette'\r\n outputs.pipette.event()\r\n}\r\n\r\n//\r\n// return values\r\n//\r\nreturn ({\r\n   name:name,\r\n   init:init,\r\n   inputs:inputs,\r\n   outputs:outputs,\r\n   interface:interface\r\n   })\r\n}())\r\n","top":"131","left":"653","inputs":{},"outputs":{}},"0.7310351262940991":{"definition":"// (c) Massachusetts Institute of Technology 2016\r\n//\r\n// This work may be reproduced, modified, distributed, performed, and\r\n// displayed for any purpose, but must acknowledge the mods\r\n// project. Copyright is retained and must be preserved. The work is\r\n// provided as is; no warranty is provided, and users accept all\r\n// liability.\r\n//\r\n// closure\r\n//\r\n(function(){\r\n//\r\n// module globals\r\n//\r\nvar mod = {}\r\n//\r\n// name\r\n//\r\nvar name = 'labware'\r\n\r\n//\r\n// initialization\r\n//\r\nvar init = function() {\r\n  mod.name = ''\r\n  mod.type = 'trough-12row'\r\n  mod.bcoords = {}\r\n  mod.acoords = {}\r\n  if (typeof deck == \"undefined\") { deck = {} }\r\n }\r\n//\r\n// inputs\r\n//\r\nvar inputs = {\r\n\r\n}\r\n//\r\n// outputs\r\n//\r\nvar outputs = {\r\n  tiprack:{\r\n   type:'string',\r\n   event:function(data){\r\n      mods.output(mod,'tiprack', mod.name)\r\n    }}\r\n  }\r\n//\r\n// interface\r\n//\r\nvar interface = function(div){\r\n  //\r\n  // change parameters buttons\r\n  //\r\n  mod.div = div\r\n  var program = \"\"\r\n  var sel = document.createElement('select')\r\n     sel.style.padding = mods.ui.padding\r\n\r\n   //\r\n   // name\r\n   //\r\n   div.appendChild(document.createElement('br'))\r\n   var input = document.createElement('input')\r\n      input.type = 'name'\r\n      input.value = 'name'\r\n      input.placeholder = 'name'\r\n      input.size = 10\r\n      input.addEventListener(\"change\", function(){\r\n        delete deck[mod.name]\r\n        mod.name = this.value\r\n        deck[mod.name] = {'labware': mod.type, 'bcoords' : mod.bcoords, 'acoords' : mod.acoords}\r\n        outputs.tiprack.event();\r\n      })\r\n      div.appendChild(input)\r\n    //\r\n    // type\r\n    //\r\n    div.appendChild(document.createElement('br'))\r\n    var input = document.createElement('input')\r\n       input.type = 'name'\r\n       input.value = 'trough-12row'\r\n       input.placeholder = 'type'\r\n       input.size = 10\r\n       input.addEventListener(\"change\", function(){\r\n         delete deck[mod.name]\r\n         mod.type = input.value\r\n         deck[mod.name] = {'labware': mod.type, 'bcoords' : mod.bcoords, 'acoords' : mod.acoords}\r\n         outputs.tiprack.event();\r\n       })\r\n       div.appendChild(input)\r\n\r\n  div.appendChild(document.createElement('br'))\r\n  div.appendChild(document.createElement('br'))\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//\r\n// return values\r\n//\r\nreturn ({\r\n   name:name,\r\n   init:init,\r\n   inputs:inputs,\r\n   outputs:outputs,\r\n   interface:interface\r\n   })\r\n}())\r\n","top":"116","left":"76","inputs":{},"outputs":{}},"0.09735958894568841":{"definition":"// (c) Massachusetts Institute of Technology 2016\r\n//\r\n// This work may be reproduced, modified, distributed, performed, and\r\n// displayed for any purpose, but must acknowledge the mods\r\n// project. Copyright is retained and must be preserved. The work is\r\n// provided as is; no warranty is provided, and users accept all\r\n// liability.\r\n//\r\n// closure\r\n//\r\n(function(){\r\n//\r\n// module globals\r\n//\r\nvar mod = {}\r\n//\r\n// name\r\n//\r\nvar name = 'labware'\r\n\r\n//\r\n// initialization\r\n//\r\nvar init = function() {\r\n  mod.name = ''\r\n  mod.type = 'trough-12row'\r\n  mod.bcoords = {}\r\n  mod.acoords = {}\r\n  if (typeof deck == \"undefined\") { deck = {} }\r\n }\r\n//\r\n// inputs\r\n//\r\nvar inputs = {\r\n\r\n}\r\n//\r\n// outputs\r\n//\r\nvar outputs = {\r\n  tiprack:{\r\n   type:'string',\r\n   event:function(data){\r\n      mods.output(mod,'tiprack', mod.name)\r\n    }}\r\n  }\r\n//\r\n// interface\r\n//\r\nvar interface = function(div){\r\n  //\r\n  // change parameters buttons\r\n  //\r\n  mod.div = div\r\n  var program = \"\"\r\n  var sel = document.createElement('select')\r\n     sel.style.padding = mods.ui.padding\r\n\r\n   //\r\n   // name\r\n   //\r\n   div.appendChild(document.createElement('br'))\r\n   var input = document.createElement('input')\r\n      input.type = 'name'\r\n      input.value = 'name'\r\n      input.placeholder = 'name'\r\n      input.size = 10\r\n      input.addEventListener(\"change\", function(){\r\n        delete deck[mod.name]\r\n        mod.name = this.value\r\n        deck[mod.name] = {'labware': mod.type, 'bcoords' : mod.bcoords, 'acoords' : mod.acoords}\r\n        outputs.tiprack.event();\r\n      })\r\n      div.appendChild(input)\r\n    //\r\n    // type\r\n    //\r\n    div.appendChild(document.createElement('br'))\r\n    var input = document.createElement('input')\r\n       input.type = 'name'\r\n       input.value = 'trough-12row'\r\n       input.placeholder = 'type'\r\n       input.size = 10\r\n       input.addEventListener(\"change\", function(){\r\n         delete deck[mod.name]\r\n         mod.type = input.value\r\n         deck[mod.name] = {'labware': mod.type, 'bcoords' : mod.bcoords, 'acoords' : mod.acoords}\r\n         outputs.tiprack.event();\r\n       })\r\n       div.appendChild(input)\r\n\r\n  div.appendChild(document.createElement('br'))\r\n  div.appendChild(document.createElement('br'))\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//\r\n// return values\r\n//\r\nreturn ({\r\n   name:name,\r\n   init:init,\r\n   inputs:inputs,\r\n   outputs:outputs,\r\n   interface:interface\r\n   })\r\n}())\r\n","top":"515","left":"651","inputs":{},"outputs":{}},"0.5483957025629105":{"definition":"// (c) Massachusetts Institute of Technology 2016\r\n//\r\n// This work may be reproduced, modified, distributed, performed, and\r\n// displayed for any purpose, but must acknowledge the mods\r\n// project. Copyright is retained and must be preserved. The work is\r\n// provided as is; no warranty is provided, and users accept all\r\n// liability.\r\n//\r\n// closure\r\n//\r\n(function(){\r\n//\r\n// module globals\r\n//\r\nvar mod = {}\r\n//\r\n// name\r\n//\r\nvar name = 'run'\r\n\r\n//\r\n// initialization\r\n//\r\nvar init = function() {\r\n  mod.upload = {}\r\n }\r\n//\r\n// inputs\r\n//\r\nvar inputs = {\r\n  instrument:{\r\n   type:'object',\r\n   event:function(evt){\r\n      mod.instructions = evt.detail\r\n      mod.upload['head'] = head\r\n      mod.upload['deck'] = deck\r\n      mod.upload['instructions'] = mod.instructions\r\n    }}\r\n}\r\n//\r\n// outputs\r\n//\r\nvar outputs = {\r\n  }\r\n//\r\n// interface\r\n//\r\nvar interface = function(div){\r\n  //\r\n  // change parameters buttons\r\n  //\r\n  mod.div = div\r\n  var program = \"\"\r\n  var sel = document.createElement('select')\r\n     sel.style.padding = mods.ui.padding\r\n  //\r\n  // upload button\r\n  //\r\n  var btn = document.createElement('button')\r\n     btn.style.padding = mods.ui.padding\r\n     btn.style.margin = 1\r\n     btn.appendChild(document.createTextNode('upload protocols'))\r\n     btn.addEventListener('click',function(){\r\n       upload_protocols()\r\n      })\r\n     div.appendChild(btn)\r\n  div.appendChild(document.createElement('br'))\r\n  div.appendChild(document.createElement('br'))\r\n  //\r\n  // upload button\r\n  //\r\n  var btn = document.createElement('button')\r\n     btn.style.padding = mods.ui.padding\r\n     btn.style.margin = 1\r\n     btn.appendChild(document.createTextNode('run protocols'))\r\n     btn.addEventListener('click',function(){\r\n       run();\r\n      })\r\n     div.appendChild(btn)\r\n  div.appendChild(document.createElement('br'))\r\n}\r\n\r\n//Local Functions\r\nfunction upload_protocols() {\r\n\r\n  var file = new File([JSON.stringify(mod.upload)], \"upload.json\", {type:\"text/plain\", lastModified: new Date().getTime()});\r\n\r\n  var url = \"http://localhost:31950/upload\"\r\n\r\n  var formData = new FormData();\r\n  formData.append(\"file\", file);\r\n\r\n  var xhr = new XMLHttpRequest();\r\n  xhr.open('POST', url, true);\r\n  console.log(JSON.stringify(mod.upload))\r\n  xhr.send(formData);  // multipart/form-data\r\n\r\n}\r\n\r\nfunction run(){\r\n  setTimeout(function(){\r\n    var root = \"http://localhost:31950/run\"\r\n    $jsonp.send(root, {\r\n          callbackName: 'handleStuff',\r\n          onSuccess: function(json){\r\n              console.log(\"running\");\r\n              clearInterval(request);\r\n          },\r\n          timeout: 15\r\n      });\r\n    }, 5000)\r\n}\r\n\r\n\r\n//\r\n// return values\r\n//\r\nreturn ({\r\n   name:name,\r\n   init:init,\r\n   inputs:inputs,\r\n   outputs:outputs,\r\n   interface:interface\r\n   })\r\n}())\r\n","top":"639","left":"1353","inputs":{},"outputs":{}}},"links":["{\"source\":\"{\\\"id\\\":\\\"0.8242047724028183\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"pipette\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.1651023753754668\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"instrument\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.7310351262940991\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"tiprack\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.8242047724028183\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"tip rack\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.7310351262940991\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"tiprack\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.8242047724028183\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"trash container\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.09735958894568841\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"tiprack\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.1651023753754668\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"container\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.1651023753754668\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"instrument\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.5483957025629105\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"instrument\\\"}\"}"]}